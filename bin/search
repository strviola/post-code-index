#!/usr/bin/env ruby

require 'pry'
# to debug, write 'Pry.start'

require_relative '../lib/common_util'
require_relative '../lib/post_code_index'

include CommonUtil
include PostCodeIndex

# keyword = ARGV[0]
# unless keyword
#   $stderr.puts 'Usage: bin/search <keyword> [<n>]'
#   exit
# end

n = begin
  Integer(ARGV[0] || 2)
rescue ArgumentError => e
  $stderr.puts 'Usage: bin/search <keyword> [<n>]'
  exit
end

unless File.exists?(cache_dir(POST_CODE_FILE_NAME))
  $stderr.puts 'Downloading post code data from japanpost.jp...'
  require_relative '../lib/zip_converter'
  include ZipConverter
  download_post_code_zip
  expand_zip
  convert_charset
  $stderr.puts 'Serializing post code CSV...'
  create_concat_post_codes
end

unless File.exists?(cache_dir(N_GRAM_FILE_NAME % n))
  $stderr.puts "Generating #{n}-gram dictionary..."
  crate_hash_file(n)
end

$stderr.puts 'Loading...'

require_relative '../lib/cache/post_code'
include PostCode
require_relative "../lib/cache/n_gram_dictionary_#{n}"
eval "include NGramDictionary#{n}"

$stderr.puts 'Searching...'

begin
  loop do
    print '> '
    keyword = gets.chomp
    if n > keyword.size
      $stderr.puts 'Skip! (Reason: keyword is too short)'
      next
    end
    post_codes = search_by_n_gram(N_GRAM_DICTIONARY, keyword, n)
    found_record = find_record(POST_CODE_DICTIONARY, post_codes, n_gram_array(keyword, n))
    if found_record.size > 0
      found_record.each do |record|
        puts record.to_s[1..-2].gsub(/, /, ',')
      end
    else
      $stderr.puts 'Not found.'
    end
  end
rescue Interrupt
  $stderr.puts 'Exit.'
end
